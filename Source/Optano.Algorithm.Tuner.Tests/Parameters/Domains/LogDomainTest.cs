#region Copyright (c) OPTANO GmbH

// ////////////////////////////////////////////////////////////////////////////////
// 
//        OPTANO GmbH Source Code
//        Copyright (c) 2010-2021 OPTANO GmbH
//        ALL RIGHTS RESERVED.
// 
//    The entire contents of this file is protected by German and
//    International Copyright Laws. Unauthorized reproduction,
//    reverse-engineering, and distribution of all or any portion of
//    the code contained in this file is strictly prohibited and may
//    result in severe civil and criminal penalties and will be
//    prosecuted to the maximum extent possible under the law.
// 
//    RESTRICTIONS
// 
//    THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES
//    ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF
//    OPTANO GMBH.
// 
//    THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED
//    FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//    COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE
//    AVAILABLE TO OTHER INDIVIDUALS WITHOUT WRITTEN CONSENT
//    AND PERMISSION FROM OPTANO GMBH.
// 
// ////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Optano.Algorithm.Tuner.Tests.Parameters.Domains
{
    using System;

    using Accord.Statistics.Distributions.Univariate;
    using Accord.Statistics.Testing;

    using Optano.Algorithm.Tuner.Genomes.Values;
    using Optano.Algorithm.Tuner.Parameters.Domains;

    using Xunit;

    /// <summary>
    /// Contains tests for <see cref="LogDomain"/>.
    /// </summary>
    public class LogDomainTest : NumericalDomainTest
    {
        #region Static Fields

        /// <summary>
        /// A minimum domain value used by several tests.
        /// </summary>
        private static readonly double minimum = 0.2;

        /// <summary>
        /// A maximum domain value used by several tests.
        /// </summary>
        private static readonly double maximum = 1000;

        #endregion

        #region Public Methods and Operators

        /// <summary>
        /// Verifies that the minimum and maximum values specified on construction really get returned on
        /// <see cref="NumericalDomain{T}.Minimum"/> and <see cref="NumericalDomain{T}.Maximum"/>.
        /// </summary>
        [Fact]
        public override void MinAndMaxCorrectlySet()
        {
            var domain = new LogDomain(LogDomainTest.minimum, LogDomainTest.maximum);
            Assert.Equal(LogDomainTest.maximum, domain.Maximum);
            Assert.Equal(LogDomainTest.minimum, domain.Minimum);
        }

        /// <summary>
        /// Checks that setting the minimum to 0 results in an <see cref="ArgumentOutOfRangeException"/>.
        /// </summary>
        [Fact]
        public void MinimumZeroThrowsException()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => new LogDomain(minimum: 0, maximum: LogDomainTest.maximum));
        }

        /// <summary>
        /// Checks that <see cref="IDomain.DomainSize"/> correctly returns the domain's magnitude.
        /// </summary>
        [Fact]
        public override void DomainSizeIsCorrect()
        {
            var boundedDomain = new LogDomain(LogDomainTest.minimum, LogDomainTest.maximum);
            Assert.Equal(
                double.PositiveInfinity,
                boundedDomain.DomainSize);
        }

        /// <summary>
        /// Uses the Anderson-Darling test to check that the distribution generated by the repeated translation of
        /// calls to <see cref="IDomain.GenerateRandomGeneValue"/> to log space does not depart from a uniform
        /// distribution.
        /// </summary>
        [Fact]
        public void GenerateRandomGeneValueDoesNotDepartFromUniformDistributionInLogSpace()
        {
            // Build up logarithmically spaced domain from e to e^10.
            double minimumExponent = 1;
            double maximumExponent = 10;
            var domain = new LogDomain(Math.Exp(minimumExponent), Math.Exp(maximumExponent));

            // Collect results of value generation.
            int numberRuns = 10000;
            double[] generatedValues = new double[numberRuns];
            for (int i = 0; i < numberRuns; i++)
            {
                Allele<double> generated = domain.GenerateRandomGeneValue();
                generatedValues[i] = Math.Log(generated.GetValue());
            }

            // Apply the Anderson-Darling test.
            AndersonDarlingTest uniformTest = new AndersonDarlingTest(
                generatedValues,
                new UniformContinuousDistribution(minimumExponent, maximumExponent));
            Assert.False(
                uniformTest.Significant,
                $"Random generation was found to be not uniform in log space by the Anderson-Darling test with significance level of {uniformTest.Size}.");
        }

        /// <summary>
        /// Tests that <see cref="LogDomain.ToString()"/> prints out the expected string
        /// containing the correct minimum and maximum values.
        /// </summary>
        [Fact]
        public override void ToStringShowsMinimumAndMaximum()
        {
            var domain = new LogDomain(LogDomainTest.minimum, LogDomainTest.maximum);
            Assert.Equal(
                FormattableString.Invariant($"[{domain.Minimum}, {domain.Maximum}] (in log space)"),
                domain.ToString());
        }

        /// <summary>
        /// Uses the Kolmogorov-Smirnov test to check that the distribution generated by the repeated translation of
        /// calls to <see cref="IDomain.MutateGeneValue(IAllele, double)"/> to log space does not depart from a 
        /// normal distribution with fitting parameters.
        /// </summary>
        [Fact]
        public void MutationDistributionDoesNotDepartFromNormalDistributionInLogSpace()
        {
            // Build up unbounded domain.
            var domain = new LogDomain(1.0 / double.MaxValue, double.MaxValue);

            // Fix the value to mutate and the variance percentage.
            Allele<double> valueToMutate = new Allele<double>(3.4);
            double variancePercentage = 0.000001;

            // Collect results in log space for a lot of mutations.
            int numberRuns = 1000;
            double[] mutationsInLogSpace = new double[numberRuns];
            for (int i = 0; i < numberRuns; i++)
            {
                mutationsInLogSpace[i] = Math.Log((double)domain.MutateGeneValue(valueToMutate, variancePercentage).GetValue());
            }

            // Apply the Kolmogorov-Smirnov test.
            double stdDev = Math.Sqrt(variancePercentage * (Math.Log(domain.Maximum) - Math.Log(domain.Minimum)));
            KolmogorovSmirnovTest normalityTest = new KolmogorovSmirnovTest(
                sample: mutationsInLogSpace,
                hypothesizedDistribution: new NormalDistribution(mean: Math.Log(valueToMutate.GetValue()), stdDev: stdDev));
            Assert.False(
                double.IsNaN(normalityTest.PValue) || normalityTest.Significant,
                $"Mutation was found to be not normal by the Kolmogorov-Smirnov test with significance level of {normalityTest.Size}.");
        }

        /// <summary>
        /// Checks that results of <see cref="NumericalDomain{T}.Mutate(T, double)"/> are contained in the domain.
        /// </summary>
        [Fact]
        public void MutationStaysInDomain()
        {
            // Initialize bounded domain.
            var domain = new LogDomain(LogDomainTest.minimum, LogDomainTest.maximum);

            // Fix the value to mutate and the variance percentage.
            Allele<double> valueToMutate = new Allele<double>(LogDomainTest.maximum - 1);
            double variancePercentage = 1.0;

            // For a lot of tries:
            int numberRuns = 1000;
            for (int i = 0; i < numberRuns; i++)
            {
                // Mutate and check that the mutated value is in the domain.
                IAllele mutatedGeneValue = domain.MutateGeneValue(valueToMutate, variancePercentage);
                Assert.True(
                    domain.ContainsGeneValue(mutatedGeneValue),
                    $"Value {mutatedGeneValue} was generated by mutation and is not contained in {domain}");
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Creates a <see cref="LogDomain"/>.
        /// </summary>
        /// <param name="minimum">The minimum value.</param>
        /// <param name="maximum">The maximum value.</param>
        /// <returns>The created domain.</returns>
        protected override IDomain CreateNumericalDomain(int minimum, int maximum)
        {
            return new LogDomain(minimum, maximum);
        }

        /// <summary>
        /// Wraps the given value into an <see cref="double"/> <see cref="Allele{T}"/>.
        /// </summary>
        /// <param name="value">The value to wrap.</param>
        /// <returns>An <see cref="IAllele"/> containing the value.</returns>
        protected override IAllele WrapInAlleleWithCorrectType(int value)
        {
            return new Allele<double>(value);
        }

        #endregion
    }
}